Index: hdparm-9.43/hdparm.c
===================================================================
--- hdparm-9.43.orig/hdparm.c
+++ hdparm-9.43/hdparm.c
@@ -1507,6 +1507,8 @@ static void usage_help (int clue, int rc
 	" --security-help   Display help for ATA security commands\n"
 	" --trim-sector-ranges        Tell SSD firmware to discard unneeded data sectors: lba:count ..\n"
 	" --trim-sector-ranges-stdin  Same as above, but reads lba:count pairs from stdin\n"
+	" --trim-sectors    Tell SSD firmware to discard unneeded data sectors (lba and count)\n"
+	"                       (OBSOLETED: use --trim-sector-ranges instead)\n"
 	" --verbose         Display extra diagnostics from some commands\n"
 	" --write-sector    Repair/overwrite a (possibly bad) sector directly on the media (VERY DANGEROUS)\n"
 	"\n");
@@ -2689,6 +2691,17 @@ get_longarg (void)
 		erase_sectors = 1;
 		get_u64_parm(0, 0, NULL, &erase_sectors_addr, 0, lba_limit, name, lba_emsg);
 #endif
+	} else if (0 == strcasecmp(name, "trim-sectors")) {
+		trim_sector_ranges = malloc(sizeof(struct sector_range_s));
+		if (!trim_sector_ranges) {
+			int err = errno;
+			perror("malloc()");
+			exit(err);
+		}
+		open_flags |= O_RDWR;
+		get_u64_parm(0, 0, NULL, &(trim_sector_ranges->lba), 0, lba_limit, name, lba_emsg);
+		get_u64_parm(0, 0, NULL, &(trim_sector_ranges->nsectors), 1, 0xffff, "bad/missing sector-count", lba_emsg);
+		trim_sector_ranges_count = 1;
 	} else if (0 == strcasecmp(name, "trim-sector-ranges-stdin")) {
 		trim_from_stdin = 1;
 	} else if (0 == strcasecmp(name, "trim-sector-ranges")) {
